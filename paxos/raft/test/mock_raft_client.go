// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/chenlanbo/experiment/paxos/protos (interfaces: RaftClient)

package test

import (
	grpc "google.golang.org/grpc"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	protos "github.com/chenlanbo/experiment/paxos/protos"
)

// Mock of RaftClient interface
type MockRaftClient struct {
	ctrl     *gomock.Controller
	recorder *_MockRaftClientRecorder
}

// Recorder for MockRaftClient (not exported)
type _MockRaftClientRecorder struct {
	mock *MockRaftClient
}

func NewMockRaftClient(ctrl *gomock.Controller) *MockRaftClient {
	mock := &MockRaftClient{ctrl: ctrl}
	mock.recorder = &_MockRaftClientRecorder{mock}
	return mock
}

func (_m *MockRaftClient) EXPECT() *_MockRaftClientRecorder {
	return _m.recorder
}

func (_m *MockRaftClient) Append(_param0 context.Context, _param1 *protos.AppendRequest, _param2 ...grpc.CallOption) (*protos.AppendReply, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Append", _s...)
	ret0, _ := ret[0].(*protos.AppendReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRaftClientRecorder) Append(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Append", _s...)
}

func (_m *MockRaftClient) Put(_param0 context.Context, _param1 *protos.PutRequest, _param2 ...grpc.CallOption) (*protos.PutReply, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Put", _s...)
	ret0, _ := ret[0].(*protos.PutReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRaftClientRecorder) Put(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", _s...)
}

func (_m *MockRaftClient) Vote(_param0 context.Context, _param1 *protos.VoteRequest, _param2 ...grpc.CallOption) (*protos.VoteReply, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Vote", _s...)
	ret0, _ := ret[0].(*protos.VoteReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockRaftClientRecorder) Vote(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Vote", _s...)
}
