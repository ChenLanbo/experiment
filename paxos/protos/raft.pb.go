// Code generated by protoc-gen-go.
// source: raft.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	raft.proto

It has these top-level messages:
	VoteRequest
	VoteReply
	AppendRequest
	AppendReply
	Log
*/
package protos

import proto "github.com/golang/protobuf/proto"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type VoteRequest struct {
	Term             *uint64 `protobuf:"varint,1,req,name=term" json:"term,omitempty"`
	CandidateId      *string `protobuf:"bytes,2,req,name=candidateId" json:"candidateId,omitempty"`
	LastLogTerm      *uint64 `protobuf:"varint,3,req,name=lastLogTerm" json:"lastLogTerm,omitempty"`
	LastLogIndex     *uint64 `protobuf:"varint,4,req,name=lastLogIndex" json:"lastLogIndex,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *VoteRequest) Reset()         { *m = VoteRequest{} }
func (m *VoteRequest) String() string { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()    {}

func (m *VoteRequest) GetTerm() uint64 {
	if m != nil && m.Term != nil {
		return *m.Term
	}
	return 0
}

func (m *VoteRequest) GetCandidateId() string {
	if m != nil && m.CandidateId != nil {
		return *m.CandidateId
	}
	return ""
}

func (m *VoteRequest) GetLastLogTerm() uint64 {
	if m != nil && m.LastLogTerm != nil {
		return *m.LastLogTerm
	}
	return 0
}

func (m *VoteRequest) GetLastLogIndex() uint64 {
	if m != nil && m.LastLogIndex != nil {
		return *m.LastLogIndex
	}
	return 0
}

type VoteReply struct {
	Granted          *bool   `protobuf:"varint,1,req,name=granted" json:"granted,omitempty"`
	Term             *uint64 `protobuf:"varint,2,req,name=term" json:"term,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *VoteReply) Reset()         { *m = VoteReply{} }
func (m *VoteReply) String() string { return proto.CompactTextString(m) }
func (*VoteReply) ProtoMessage()    {}

func (m *VoteReply) GetGranted() bool {
	if m != nil && m.Granted != nil {
		return *m.Granted
	}
	return false
}

func (m *VoteReply) GetTerm() uint64 {
	if m != nil && m.Term != nil {
		return *m.Term
	}
	return 0
}

type AppendRequest struct {
	Term             *uint64 `protobuf:"varint,1,req,name=term" json:"term,omitempty"`
	LeaderId         *string `protobuf:"bytes,2,req,name=leaderId" json:"leaderId,omitempty"`
	PrevLogTerm      *uint64 `protobuf:"varint,3,req,name=prevLogTerm" json:"prevLogTerm,omitempty"`
	PrevLogIndex     *uint64 `protobuf:"varint,4,req,name=prevLogIndex" json:"prevLogIndex,omitempty"`
	CommitIndex      *uint64 `protobuf:"varint,5,req,name=commitIndex" json:"commitIndex,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AppendRequest) Reset()         { *m = AppendRequest{} }
func (m *AppendRequest) String() string { return proto.CompactTextString(m) }
func (*AppendRequest) ProtoMessage()    {}

func (m *AppendRequest) GetTerm() uint64 {
	if m != nil && m.Term != nil {
		return *m.Term
	}
	return 0
}

func (m *AppendRequest) GetLeaderId() string {
	if m != nil && m.LeaderId != nil {
		return *m.LeaderId
	}
	return ""
}

func (m *AppendRequest) GetPrevLogTerm() uint64 {
	if m != nil && m.PrevLogTerm != nil {
		return *m.PrevLogTerm
	}
	return 0
}

func (m *AppendRequest) GetPrevLogIndex() uint64 {
	if m != nil && m.PrevLogIndex != nil {
		return *m.PrevLogIndex
	}
	return 0
}

func (m *AppendRequest) GetCommitIndex() uint64 {
	if m != nil && m.CommitIndex != nil {
		return *m.CommitIndex
	}
	return 0
}

type AppendReply struct {
	Success          *bool   `protobuf:"varint,1,req,name=success" json:"success,omitempty"`
	Term             *uint64 `protobuf:"varint,2,req,name=term" json:"term,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AppendReply) Reset()         { *m = AppendReply{} }
func (m *AppendReply) String() string { return proto.CompactTextString(m) }
func (*AppendReply) ProtoMessage()    {}

func (m *AppendReply) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return false
}

func (m *AppendReply) GetTerm() uint64 {
	if m != nil && m.Term != nil {
		return *m.Term
	}
	return 0
}

type Log struct {
	Term             *uint64 `protobuf:"varint,1,req,name=term" json:"term,omitempty"`
	LogId            *uint64 `protobuf:"varint,2,req,name=logId" json:"logId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}

func (m *Log) GetTerm() uint64 {
	if m != nil && m.Term != nil {
		return *m.Term
	}
	return 0
}

func (m *Log) GetLogId() uint64 {
	if m != nil && m.LogId != nil {
		return *m.LogId
	}
	return 0
}

// Client API for RaftServer service

type RaftServerClient interface {
	// Vote request
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReply, error)
	// Append request
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendReply, error)
}

type raftServerClient struct {
	cc *grpc.ClientConn
}

func NewRaftServerClient(cc *grpc.ClientConn) RaftServerClient {
	return &raftServerClient{cc}
}

func (c *raftServerClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReply, error) {
	out := new(VoteReply)
	err := grpc.Invoke(ctx, "/protos.RaftServer/Vote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServerClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendReply, error) {
	out := new(AppendReply)
	err := grpc.Invoke(ctx, "/protos.RaftServer/Append", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RaftServer service

type RaftServerServer interface {
	// Vote request
	Vote(context.Context, *VoteRequest) (*VoteReply, error)
	// Append request
	Append(context.Context, *AppendRequest) (*AppendReply, error)
}

func RegisterRaftServerServer(s *grpc.Server, srv RaftServerServer) {
	s.RegisterService(&_RaftServer_serviceDesc, srv)
}

func _RaftServer_Vote_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(VoteRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RaftServerServer).Vote(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _RaftServer_Append_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(AppendRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RaftServerServer).Append(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _RaftServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.RaftServer",
	HandlerType: (*RaftServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vote",
			Handler:    _RaftServer_Vote_Handler,
		},
		{
			MethodName: "Append",
			Handler:    _RaftServer_Append_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
